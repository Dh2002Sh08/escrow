"use client";
import React, { useState, useEffect } from 'react';
import { OptimismConnectButton } from './optimism-connect-button';
import { useAccount, useReadContract } from 'wagmi';
import { CONTRCAT_ADDRESS } from '@/utils/contractAddress';
import { ABI } from '@/utils/ABI';
import { formatUnits } from 'viem';
import Link from 'next/link';

// Status mapping for better readability
const ESCROW_STATUS = {
  0: "Created",
  1: "Delivered",
  2: "Completed",
  3: "Cancelled"
};

interface EscrowDetails {
  id: string;
  sender: string;
  receiver: string;
  amount: string;
  status: string;
}

export default function EscrowDetails() {
  const { address } = useAccount();
  const [escrows, setEscrows] = useState<EscrowDetails[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentIndex, setCurrentIndex] = useState(0);

  // Fetch sender escrow IDs
  const { data: senderEscrowIds } = useReadContract({
    address: CONTRCAT_ADDRESS,
    abi: ABI,
    functionName: "getSenderEscrows",
    account: address,
  });

  // Fetch receiver escrow IDs
  const { data: receiverEscrowIds } = useReadContract({
    address: CONTRCAT_ADDRESS,
    abi: ABI,
    functionName: "getReceiverEscrows",
    account: address,
  });

  // Function to check if value is BigInt array
  function isBigIntArray(value: unknown): value is bigint[] {
    return Array.isArray(value) && value.every((item) => typeof item === 'bigint');
  }

  // Combine all escrow IDs
  const allEscrowIds = [
    ...(isBigIntArray(senderEscrowIds) ? senderEscrowIds : []),
    ...(isBigIntArray(receiverEscrowIds) ? receiverEscrowIds : [])
  ];

  // Get current escrow ID
  const currentEscrowId = allEscrowIds[currentIndex];

  // Fetch current escrow details
  const { data: currentEscrowDetails } = useReadContract({
    address: CONTRCAT_ADDRESS,
    abi: ABI,
    functionName: "escrows",
    args: [currentEscrowId || BigInt(0)],
    query: { enabled: !!currentEscrowId },
  });

  useEffect(() => {
    if (!address) {
      setLoading(false);
      return;
    }

    if (!currentEscrowId) {
      setLoading(false);
      return;
    }

    try {
      if (currentEscrowDetails && Array.isArray(currentEscrowDetails)) {
        const [sender, receiver, amount, status] = currentEscrowDetails as [string, string, bigint, number];
        const newEscrowDetail = {
          id: currentEscrowId.toString(),
          sender,
          receiver,
          amount: formatUnits(amount, 18),
          status: ESCROW_STATUS[status as keyof typeof ESCROW_STATUS]
        };

        setEscrows(prevEscrows => [...prevEscrows, newEscrowDetail]);
        
        // Move to next escrow if available
        if (currentIndex < allEscrowIds.length - 1) {
          setCurrentIndex(prev => prev + 1);
        } else {
          setLoading(false);
        }
      }
    } catch (error) {
      console.error('Error processing escrow details:', error);
      setLoading(false);
    }
  }, [address, currentEscrowId, currentEscrowDetails, currentIndex, allEscrowIds.length]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <OptimismConnectButton />
        <div>Loading...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-4">
        <OptimismConnectButton />
        <h1 className="text-2xl font-bold text-white">Your Escrows</h1>
        <Link 
          href="/escrow"
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
        >
          Create New Escrow
        </Link>
      </div>
      <div className="overflow-x-auto">
        <table className="min-w-full bg-gray-800 border border-gray-600 text-white">
          <thead>
            <tr className="bg-gray-900">
              <th className="px-4 py-2 border border-gray-600">Escrow ID</th>
              <th className="px-4 py-2 border border-gray-600">Sender</th>
              <th className="px-4 py-2 border border-gray-600">Receiver</th>
              <th className="px-4 py-2 border border-gray-600">Amount (Tokens)</th>
              <th className="px-4 py-2 border border-gray-600">Status</th>
            </tr>
          </thead>
          <tbody>
            {escrows.length === 0 ? (
              <tr>
                <td colSpan={5} className="px-4 py-2 border border-gray-600 text-center">
                  No escrows found
                </td>
              </tr>
            ) : (
              escrows.map((escrow) => (
                <tr key={escrow.id} className="hover:bg-gray-700">
                  <td className="px-4 py-2 border border-gray-600">{escrow.id}</td>
                  <td className="px-4 py-2 border border-gray-600">{escrow.sender}</td>
                  <td className="px-4 py-2 border border-gray-600">{escrow.receiver}</td>
                  <td className="px-4 py-2 border border-gray-600">{escrow.amount}</td>
                  <td className="px-4 py-2 border border-gray-600">{escrow.status}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}